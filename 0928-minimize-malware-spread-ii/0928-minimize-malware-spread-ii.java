class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, result = initial[0], max = 0;
        boolean[] infected = new boolean[n];
        for (int i : initial)
            infected[i] = true;
        for (int i : initial) {
            boolean[] visited = new boolean[n];
            visited[i] = true;
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (!visited[j] && graph[i][j] == 1)
                    count += dfs(graph, j, visited, infected);
            }
            if (count > max || count == max && i < result) {
                max = count;
                result = i;
            }
        }
        return result;
    }
    
    public int dfs(int[][] graph, int i, boolean[] visited, boolean[] infected) {
        if (infected[i])
            return 0;
        visited[i] = true;
        int count = 1;
        for (int j = 0; j < graph[i].length; j++) {
            if (!visited[j] && graph[i][j] == 1) {
                int c = dfs(graph, j, visited, infected);
                if (c == 0) {
                    infected[i] = true;
                    return 0;
                }
                count += c;
            }
        }
        return count;
    }
}